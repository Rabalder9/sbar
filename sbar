#!/bin/env sh

# INIT
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
update_cpu () { 
    read -r cputemp </sys/class/thermal/thermal_zone0/temp
    cpu="CPU: $((cputemp/1000))°"
}

update_time () { 
	time="$(date "+[%d/%m-%y] [%R]")" 
}


update_bat () { 
	read -r bat_capacity1 </sys/class/power_supply/BAT0/capacity
	read -r bat_status2 </sys/class/power_supply/BAT1/status
	read -r bat_capacity2 </sys/class/power_supply/BAT1/capacity

  bat_capacity=$(((bat_capacity1+bat_capacity2)/2))

	if [ "$bat_capacity" = "20" ]; then notify-send "Lavt batteri!"
	fi

	bat="BAT: $bat_capacity%"
}

update_vol () {
	vol="VOL: $(pamixer --get-volume-human)"
}

update_backlight () { 
	# you might need to change the path depending on your device
	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
	backlight="☀$((actual_brightness*100/max_brightness))%"
}


# modules that don't update on their own need to be run at the start for getting their initial value
update_vol
update_backlight

display () { 
	xsetroot -name " [$cpu] [$vol] [$bat] [$backlight] $time "
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN+10"
trap	"update_backlight;display" 	"RTMIN+1"
trap	"update_bat;display" 		"RTMIN+2"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 20 )) -eq 0 ] && update_time 	# update time every 20 seconds
		[ $((sec % 20)) -eq 0 ] && update_cpu 	# update cpu every 20 seconds
		[ $((sec % 30)) -eq 0 ] && update_bat

		# how often the display updates ( 5 seconds )
		[ $((sec % 20 )) -eq 0 ] && display
		sec=$((sec + 1))
		sleep 1 & wait
done 
